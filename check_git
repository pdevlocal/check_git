#! /bin/bash
#
# Git clone/push monitoring
#
# Usage: ./check_git url password private_key_file
#
# Description:
#
# Attempts a clone of a remote repository URL. If username/password/private_key_file
# are provided, then it will attempt to push back to the repo.
#
# Output:
#
# Returns OK state if the clone (and push, if requested) succeed.
#
# Examples:
#
# git URL:
#   check_git git://git.drupal.org/rfay/sandbox/11010.git
# ssh URL:
#   check_git testuser@git.drupal.org:rfay/sandbox/11010.git --key /path/to/id_file
# ssh URL including a commit and a push:
#   check_git testuser@git.drupal.org:rfay/sandbox/11010.git --key /path/to/id_file --push
#
# Paths to commands used in this script.  These
# may have to be modified to match your system setup.
# If a writable git URL is provided, it's assumed to be a test-only repository,
# and it will grow, of course.
#PATH=""

PROGNAME=`/usr/bin/basename $0`
PROGPATH=`echo $0 | sed -e 's,[\\/][^\\/][^\\/]*$,,'`
. $PROGPATH/utils.sh
REVISION="0.1"
TMP_BASE=/tmp
ECHO="/bin/echo"
GIT=/usr/bin/git
RM=/bin/rm

# Directory to use to create the repo
REPO_DIR=/tmp/repo.$RANDOM
trap "rm -Rf $REPO_DIR" EXIT

print_usage() {
    echo "Usage: $PROGNAME repo_url [ --keyfile /path/to/id_file ] [ --push ]"
    echo "Usage: $PROGNAME --help"
    echo "Usage: $PROGNAME --version"
}

print_help() {
    print_revision $PROGNAME $REVISION
    echo ""
    print_usage
    echo ""
    echo "Git remote repo checker for Nagios"
    echo ""
    support
}

# Make sure the correct number of command line
# arguments have been supplied

if [ $# -lt 1 ]; then
    print_usage
    exit $STATE_UNKNOWN
fi

# Grab the command line arguments

repo=$1
shift

exitstatus=$STATE_WARNING #default
while test -n "$1"; do
    case "$1" in
        --help)
            print_help
            exit $STATE_OK
            ;;
        -h)
            print_help
            exit $STATE_OK
            ;;
        --version)
            print_revision $PROGNAME $REVISION
            exit $STATE_OK
            ;;
        -V)
            print_revision $PROGNAME $REVISION
            exit $STATE_OK
            ;;
        --password)
            password=$2
            shift
            ;;
        --keyfile)
            keyfile=$2
            export IDENTITY_FILE=$keyfile
            shift
            ;;
        --push)
            push=1
            shift
            ;;
        --exitstatus)
            exitstatus=$2
            shift
            ;;
        *)
            echo "Unknown argument: $1"
            print_usage
            exit $STATE_UNKNOWN
            ;;
    esac
    shift
done



export GIT_SSH=$PROGPATH/check_git_exec_ssh.sh

# Use git ls-remote if not testing push
if [ "$push" == "" ]; then

  OUTPUT="$GIT ls-remote $repo HEAD
    $($GIT ls-remote $repo HEAD 2>&1)"
  GIT_CLONE_RESULT=$?

else

  OUTPUT="$GIT clone $repo $REPO_DIR
    $($GIT clone $repo $REPO_DIR 2>&1)"
  GIT_CLONE_RESULT=$?

fi

if [ "$GIT_CLONE_RESULT" = "0" ]; then
    exitstatus=$STATE_OK
elif [ "$GIT_CLONE_RESULT" = "2" ]; then
    exitstatus=$STATE_WARNING
    exit $exitstatus
else
    $ECHO "Failed operation: $OUTPUT"
    exitstatus=$STATE_CRITICAL
    exit $exitstatus
fi

# attempt a push here
if [ "$push" != "" ]; then
  export GIT_WORK_TREE=$REPO_DIR
  export GIT_DIR=$REPO_DIR/.git
  echo "Committed by Nagios on $(hostname) check_git: $(date)" >> $GIT_WORK_TREE/check_git_commits.txt
  $GIT add .
  NOW=$(date)
  ERROR=$($GIT commit -m "Test commit by check_git $NOW")
  OUTPUT="$OUTPUT
    $ERROR"
  ERROR="$($GIT push 2>&1)"
  GIT_PUSH_RESULT=$?
  OUTPUT="$OUTPUT
   $ERROR"
  if [ "$GIT_PUSH_RESULT" = "0" ]; then
    exitstatus=$STATE_OK
  else
    exitstatus=$STATE_CRITICAL
  fi
fi

$ECHO "$OUTPUT"
exit $exitstatus;
